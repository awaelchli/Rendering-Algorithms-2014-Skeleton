package rt.test;

import static org.junit.Assert.*;

import java.io.IOException;
import java.util.Arrays;

import org.junit.Before;
import org.junit.Test;

import rt.ObjReader;
import rt.intersectables.Mesh;

public class ObjReaderTest {

	private Mesh mesh;
	private static float EPSILON = 1e-4f;

	@Before
	public void setUp() throws IOException {
		mesh = ObjReader.read("../obj/teapot.obj", 1.0f);
	}
	
	@Test
	public void meshShouldBeWithinOneBox() {		
		for (float c: mesh.vertices) {
			assertTrue("Not within [-1, 1] box: " + c, c <= 1 && c >= -1);
		}
	}
	
	@Test
	public void readerShouldProduceExpectedFaces() {
		for (int i = 0; i < mesh.indices.length; i++) {
			assertEquals(i, mesh.indices[i]);
		}
	}
	
	@Test
	public void readerShouldProduceExpectedVertices() {
		float[] expectedVertices = new float[] { 0.36866283f, 0.2566241f, 0.0f,
				0.36376637f, 0.28384358f, 0.0f, 0.3057169f, 0.28384358f,
				-0.2188017f, 0.3057169f, 0.28384358f, -0.2188017f, 0.30995336f,
				0.2566241f, -0.22128995f, 0.36866283f, 0.2566241f, 0.0f,
				0.36376637f, 0.28384358f, 0.0f, 0.3787431f, 0.28384358f, 0.0f,
				0.3186748f, 0.28384358f, -0.22641245f, 0.3186748f, 0.28384358f,
				-0.22641245f, 0.3057169f, 0.28384358f, -0.2188017f,
				0.36376637f, 0.28384358f, 0.0f, 0.3787431f, 0.28384358f, 0.0f,
				0.39976865f, 0.2566241f, 0.0f, 0.33686537f, 0.2566241f,
				-0.23709622f, 0.33686537f, 0.2566241f, -0.23709622f,
				0.3186748f, 0.28384358f, -0.22641245f, 0.3787431f, 0.28384358f,
				0.0f, 0.30995336f, 0.2566241f, -0.22128995f, 0.3057169f,
				0.28384358f, -0.2188017f, 0.15198147f, 0.28384358f,
				-0.37253714f, 0.15198147f, 0.28384358f, -0.37253714f,
				0.1544697f, 0.2566241f, -0.3767736f, 0.30995336f, 0.2566241f,
				-0.22128995f, 0.3057169f, 0.28384358f, -0.2188017f, 0.3186748f,
				0.28384358f, -0.22641245f, 0.15959221f, 0.28384358f,
				-0.38549504f, 0.15959221f, 0.28384358f, -0.38549504f,
				0.15198147f, 0.28384358f, -0.37253714f, 0.3057169f,
				0.28384358f, -0.2188017f, 0.3186748f, 0.28384358f,
				-0.22641245f, 0.33686537f, 0.2566241f, -0.23709622f,
				0.17027597f, 0.2566241f, -0.40368563f, 0.17027597f, 0.2566241f,
				-0.40368563f, 0.15959221f, 0.28384358f, -0.38549504f,
				0.3186748f, 0.28384358f, -0.22641245f, 0.1544697f, 0.2566241f,
				-0.3767736f, 0.15198147f, 0.28384358f, -0.37253714f,
				-0.06682024f, 0.28384358f, -0.4305866f, -0.06682024f,
				0.28384358f, -0.4305866f, -0.06682024f, 0.2566241f,
				-0.43548307f, 0.1544697f, 0.2566241f, -0.3767736f, 0.15198147f,
				0.28384358f, -0.37253714f, 0.15959221f, 0.28384358f,
				-0.38549504f, -0.06682024f, 0.28384358f, -0.44556335f,
				-0.06682024f, 0.28384358f, -0.44556335f, -0.06682024f,
				0.28384358f, -0.4305866f, 0.15198147f, 0.28384358f,
				-0.37253714f, 0.15959221f, 0.28384358f, -0.38549504f,
				0.17027597f, 0.2566241f, -0.40368563f, -0.06682024f,
				0.2566241f, -0.46658888f, -0.06682024f, 0.2566241f,
				-0.46658888f, -0.06682024f, 0.28384358f, -0.44556335f,
				0.15959221f, 0.28384358f, -0.38549504f, -0.06682024f,
				0.2566241f, -0.43548307f, -0.06682024f, 0.28384358f,
				-0.4305866f };
		for (int i = 0; i < expectedVertices.length; i++) {
			assertEquals(expectedVertices[i], mesh.vertices[i], EPSILON);
		}
	}
	
	@Test
	public void readerShouldProduceExpectedNormals() {
		float expectedNormals[] = new float[] { -0.980495f, -0.176385f,
				0.0867103f, -0.980495f, -0.176385f, -0.0867104f, -0.893481f,
				-0.176801f, 0.412835f, -0.893481f, -0.176801f, 0.412835f,
				-0.805643f, -0.177069f, 0.56532f, -0.980495f, -0.176385f,
				0.0867103f, 0.0f, 1.0f, 0.0f, 0.43575f, 0.899242f, -0.0385357f,
				0.357335f, 0.899716f, -0.250644f, 0.357335f, 0.899716f,
				-0.250644f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.43575f,
				0.899242f, -0.0385357f, 0.854999f, 0.518605f, -0.00494515f,
				0.737903f, 0.51981f, -0.430462f, 0.737903f, 0.51981f,
				-0.430462f, 0.357335f, 0.899716f, -0.250644f, 0.43575f,
				0.899242f, -0.0385357f, -0.805643f, -0.177069f, 0.56532f,
				-0.893481f, -0.176801f, 0.412835f, -0.56532f, -0.177069f,
				0.805643f, -0.56532f, -0.177069f, 0.805643f, -0.412835f,
				-0.176801f, 0.893481f, -0.805643f, -0.177069f, 0.56532f, 0.0f,
				1.0f, 0.0f, 0.357335f, 0.899716f, -0.250644f, 0.183148f,
				0.89955f, -0.396569f, 0.183148f, 0.89955f, -0.396569f, 0.0f,
				1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.357335f, 0.899716f, -0.250644f,
				0.737903f, 0.51981f, -0.430462f, 0.421718f, 0.519882f,
				-0.742884f, 0.421718f, 0.519882f, -0.742884f, 0.183148f,
				0.89955f, -0.396569f, 0.357335f, 0.899716f, -0.250644f,
				-0.412835f, -0.176801f, 0.893481f, -0.56532f, -0.177069f,
				0.805643f, -0.0880166f, -0.176365f, 0.980382f, -0.0880166f,
				-0.176365f, 0.980382f, 0.0796941f, -0.201282f, 0.976286f,
				-0.412835f, -0.176801f, 0.893481f, 0.0f, 1.0f, 0.0f, 0.183148f,
				0.89955f, -0.396569f, -0.0385538f, 0.899031f, -0.436184f,
				-0.0385538f, 0.899031f, -0.436184f, 0.0f, 1.0f, 0.0f, 0.0f,
				1.0f, 0.0f, 0.183148f, 0.89955f, -0.396569f, 0.421718f,
				0.519882f, -0.742884f, -0.00494515f, 0.518605f, -0.854999f,
				-0.00494515f, 0.518605f, -0.854999f, -0.0385538f, 0.899031f,
				-0.436184f, 0.183148f, 0.89955f, -0.396569f, 0.0796941f,
				-0.201282f, 0.976286f, -0.0880166f, -0.176365f, 0.980382f,
				0.394633f, -0.272166f, 0.877605f, 0.394633f, -0.272166f,
				0.877605f, 0.54729f, -0.309362f, 0.777669f, 0.0796941f,
				-0.201282f, 0.976286f, 0.0f, 1.0f, 0.0f, -0.0385538f,
				0.899031f, -0.436184f, -0.251958f, 0.898706f, -0.35895f,
				-0.251958f, 0.898706f, -0.35895f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f,
				0.0f, -0.0385538f, 0.899031f, -0.436184f, -0.00494515f,
				0.518605f, -0.854999f, -0.430977f, 0.518288f, -0.738672f,
				-0.430977f, 0.518288f, -0.738672f, -0.251958f, 0.898706f,
				-0.35895f, -0.0385538f, 0.899031f, -0.436184f, 0.54729f,
				-0.309362f, 0.777669f, 0.394633f, -0.272166f, 0.877605f,
				0.778944f, -0.331396f, 0.532375f, 0.778944f, -0.331396f,
				0.532375f, 0.883456f, -0.262924f, 0.387784f, 0.54729f,
				-0.309362f, 0.777669f, 0.0f, 1.0f, 0.0f, -0.251958f, 0.898706f,
				-0.35895f, -0.397847f, 0.898909f, -0.183521f, -0.397847f,
				0.898909f, -0.183521f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f,
				-0.251958f, 0.898706f, -0.35895f, -0.430977f, 0.518288f,
				-0.738672f, -0.74413f, 0.517446f, -0.422516f, -0.74413f,
				0.517446f, -0.422516f, -0.397847f, 0.898909f, -0.183521f,
				-0.251958f, 0.898706f, -0.35895f, 0.883456f, -0.262924f };
	for (int i = 0; i < expectedNormals.length; i++) {
		assertEquals(expectedNormals[i], mesh.normals[i], EPSILON);
	}
}

}
